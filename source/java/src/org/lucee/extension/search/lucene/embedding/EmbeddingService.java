package org.lucee.extension.search.lucene.embedding;

import java.io.IOException;

import lucee.runtime.config.Config;
import lucee.runtime.type.Struct;

/**
 * Interface for services that provide text embedding functionality. An
 * embedding service converts text content into numerical vector representations
 * that can be used for semantic search, document similarity, and other NLP
 * tasks.
 * <p>
 * Implementations of this interface may use different underlying models or
 * approaches to generate the embeddings, such as TF-IDF, Word2Vec, transformer
 * models, etc.
 * </p>
 */
public interface EmbeddingService {

	public void init(Config config, Struct parameters) throws IOException;

	/**
	 * Generates a vector embedding for the provided text content.
	 * <p>
	 * The generated embedding represents the semantic meaning of the text content
	 * in a high-dimensional vector space. Similar texts should have similar
	 * embedding vectors (as measured by cosine similarity or other distance
	 * metrics).
	 * </p>
	 * 
	 * @param contents
	 *            The text content to generate an embedding for. This may be a
	 *            single word, sentence, paragraph, or entire document.
	 * @return A float array containing the embedding vector. The length of the
	 *         array will be consistent with the dimension reported by
	 *         {@link #getDimension()}. If generation fails, an empty or zero vector
	 *         may be returned.
	 */
	public float[] generate(String contents) throws IOException;

	/**
	 * Returns the dimensionality of the embedding vectors generated by this
	 * service.
	 * <p>
	 * This value represents the number of floating-point values that make up each
	 * embedding vector. The dimension is fixed for a particular embedding service
	 * implementation and model.
	 * </p>
	 * 
	 * @return The number of dimensions in the embedding vectors
	 */
	public int getDimension();

	/**
	 * Releases any resources used by this embedding service.
	 * <p>
	 * This method should be called when the embedding service is no longer needed
	 * to ensure proper cleanup of resources such as model files, caches, or
	 * connections to external services.
	 * </p>
	 */
	public void close() throws IOException;

}