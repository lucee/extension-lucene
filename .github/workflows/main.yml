name: Java CI Combined

on: [push, pull_request, workflow_dispatch]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Extract version number
        id: extract-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Cache Lucee files
        uses: actions/cache@v4
        with:
          path: ~/work/_actions/lucee/script-runner/main/lucee-download-cache
          key: lucee-downloads

      - name: Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
          # Trust the imported key
          echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key $(gpg --list-secret-keys --keyid-format LONG | grep sec | cut -d'/' -f2 | cut -d' ' -f1) trust quit
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

  build-and-test:
    runs-on: ubuntu-latest
    needs: setup
    env:
      LUCEE_TEST_VERSIONS_JAKARTA: ${{ vars.LUCEE_TEST_VERSIONS_JAKARTA }}
    strategy:
      matrix:
        lucee: ${{ fromJSON(vars.LUCEE_TEST_VERSIONS_JAKARTA) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Install with Maven
        run: |
          echo "------- Maven Install -------"
          mvn -B -e -f pom.xml clean install -Dgoal=install

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lucene-lex-${{ matrix.lucee.version }}
          path: target/*.lex

      - name: Checkout Lucee
        uses: actions/checkout@v4
        with:
          repository: lucee/lucee
          path: lucee

      - name: Run Lucee Test Suite
        uses: lucee/script-runner@main
        with:
          webroot: ${{ github.workspace }}/lucee/test
          execute: /bootstrap-tests.cfm
          luceeVersion: ${{ matrix.lucee.version }}
          luceeVersionQuery: ${{ matrix.lucee.query }}
          extensionDir: ${{ github.workspace }}/target
        env:
          testLabels: lucene
          testAdditional: ${{ github.workspace }}/tests

  deploy:
    runs-on: ubuntu-latest
    needs: [setup, build-and-test]
    if: always() && needs.build-and-test.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << 'EOF'
          <settings>
            <servers>
              <server>
                <id>ossrh</id>
                <username>${env.MAVEN_USERNAME}</username>
                <password>${env.MAVEN_PASSWORD}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>ossrh</id>
                <activation>
                  <activeByDefault>true</activeByDefault>
                </activation>
                <properties>
                  <gpg.executable>gpg</gpg.executable>
                  <gpg.passphrase>${env.GPG_PASSPHRASE}</gpg.passphrase>
                  <gpg.keyname>${env.GPG_KEY_ID}</gpg.keyname>
                </properties>
              </profile>
            </profiles>
          </settings>
          EOF

      - name: Build and Deploy with Maven
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          if [[ "${{ needs.setup.outputs.version }}" == *-SNAPSHOT ]]; then
            echo "------- Maven Deploy snapshot on ${{ github.event_name }} -------"
            mvn -B -e -f pom.xml clean deploy -Dgoal=deploy
          else
            echo "------- Maven Deploy release on ${{ github.event_name }} -------"
            mvn -B -e -f pom.xml clean deploy -Dgoal=deploy -DperformRelease=true
          fi

      - name: Upload deployment artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: deployed-artifacts-${{ needs.setup.outputs.version }}
          path: |
            target/*.jar
            target/*.lex
            target/*.pom